<?php

/**
 * @file
 * Enables password creation on registration form.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Drupal\user\Form\UserPasswordForm;
use Drupal\user\UserInterface;

/**
 * No verification email is sent.
 */
define('USER_REGISTRATIONPASSWORD_NO_VERIFICATION', 'none');

/**
 * Verification email is sent before password is set.
 */
define('USER_REGISTRATIONPASSWORD_VERIFICATION_DEFAULT', 'default');

/**
 * Verification email is sent after password is set.
 */
define('USER_REGISTRATIONPASSWORD_VERIFICATION_PASS', 'with-pass');

/**
 * Implements hook_form_FORM_ID_alter().
 */
function user_registrationpassword_form_user_admin_settings_alter(&$form, FormStateInterface $form_state) {
  $config = \Drupal::config('user_registrationpassword.settings');
  $mail_config = \Drupal::config('user.mail');

  // Render our configuration options.
  $form['registration_cancellation']['user_registrationpassword_registration'] = array(
    '#type' => 'radios',
    '#title' => t('Require e-mail verification when a visitor creates an account'),
    '#description' => t('Choose whether new users can set their password directly on the registration form and login during registration (without e-mail confirmation), or if they will be required to validate their e-mail address prior to logging into the site, and will be assigned a system-generated password, or they can set a password during registration, but first have to confirm their account via the activation e-mail sent after registration is complete, before they can log in to the site.'),
    '#options' => array(
      USER_REGISTRATIONPASSWORD_NO_VERIFICATION => t('Do not require a verification e-mail, and let users set their password on the registration form.'),
      USER_REGISTRATIONPASSWORD_VERIFICATION_DEFAULT => t('Require a verification e-mail, but wait for the approval e-mail to let users set their password.'),
      USER_REGISTRATIONPASSWORD_VERIFICATION_PASS => t('Require a verification e-mail, but let users set their password directly on the registration form.'),
    ),
    '#default_value' => $config->get('registration'),
  );

  // Render an option to change first time login link behaviour.
  $form['registration_cancellation']['user_registrationpassword_registration_ftll_expire'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable Account activation link expiration'),
    '#description' => t('This option enables site admins to expire activation links after the expiration time has passed. People are still able to request a new activation e-mail via the password reset form after this time expires to activate their account via a new activation e-mail.'),
    '#default_value' => $config->get('registration_ftll_expire'),
    '#weight' => 7,
  );
  // Hide this setting by default.
  $form['registration_cancellation']['ftll_timeout'] = array(
    '#type' => 'container',
    '#weight' => 8,
    '#states' => array(
      'invisible' => array(
        'input[name="user_registrationpassword_registration_ftll_expire"]' => array('checked' => FALSE),
      ),
    ),
  );
  $form['registration_cancellation']['ftll_timeout']['user_registrationpassword_registration_ftll_timeout'] = array(
    '#type' => 'textfield',
    '#title' => t('Account activation link expiration'),
    '#description' => t('Enter the expiration time for the activation link (aka first time login link) sent in the activation e-mail. The default is set to 86400 seconds (= 24 hours).'),
    '#default_value' => $config->get('registration_ftll_timeout'),
    '#maxlength' => 10,
    '#weight' => 8,
  );

  // Hide the default option.
  $form['registration_cancellation']['user_email_verification']['#access'] = FALSE;

  // Set up available tokens.
  if (\Drupal::moduleHandler()->moduleExists('rpt')) {
    // Hide the option to generate passwords, because we
    // only use the token option the rtp module provides.
    $form['registration_cancellation']['rpt_password_generate']['#access'] = FALSE;

    // We support the Registration Password Tokens module.
    // Add a password to a template with [user:password].
    // See http://drupal.org/project/rpt for more information.
    $email_token_help = t('Available variables are: [site:name], [site:url], [user:name], [user:mail], [user:password], [site:login-url], [site:url-brief], [user:edit-url], [user:one-time-login-url], [user:cancel-url], [user:registrationpassword-url].');
  }
  else {
    $email_token_help = t('Available variables are: [site:name], [site:url], [user:name], [user:mail], [site:login-url], [site:url-brief], [user:edit-url], [user:one-time-login-url], [user:cancel-url], [user:registrationpassword-url].');
  }

  // Render e-mail template settings.
  $form['email_user_registrationpassword'] = array(
    '#type' => 'details',
    '#title' => t('Welcome (no approval required, password is set)'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#description' => t('Edit the welcome e-mail messages sent to new members upon registering, when no administrator approval is required and password has already been set.') . ' ' . $email_token_help,
    '#group' => 'email',
  );
  $form['email_user_registrationpassword']['user_registrationpassword_register_subject'] = array(
    '#type' => 'textfield',
    '#title' => t('Subject'),
    '#default_value' => _user_registrationpassword_mail_text('register_subject', NULL, array(), FALSE),
    '#maxlength' => 180,
  );
  $form['email_user_registrationpassword']['user_registrationpassword_register_body'] = array(
    '#type' => 'textarea',
    '#title' => t('Body'),
    '#default_value' => _user_registrationpassword_mail_text('register_body', NULL, array(), FALSE),
    '#rows' => 15,
  );

  // Reorder the form items back to their original order.
  $form['anonymous_settings']['#weight'] = -2;
  $form['admin_role']['#weight'] = -1;
  $form['registration_cancellation']['#weight'] = 0;
  $form['registration_cancellation']['user_cancel_method']['#weight'] = 3;
  $form['registration_cancellation']['user_registrationpassword_registration']['#weight'] = 2;
  $form['personalization']['#weight'] = 4;
  $form['email_title']['#weight'] = 5;
  $form['email']['#weight'] = 6;
  $form['email_admin_created']['#weight'] = 6;

  // Register our extra submit function.
  $form['#submit'][] = 'user_registrationpassword_admin_settings_submit';
}

/**
 * Submit handler for the user admin form.
 */
function user_registrationpassword_admin_settings_submit(&$form, FormStateInterface $form_state) {
  $config = \Drupal::configFactory()->getEditable('user_registrationpassword.settings');
  $user_config = \Drupal::configFactory()->getEditable('user.settings');

  $user_registrationpassword_type = $form_state->getValue('user_registrationpassword_registration');
  if ($user_registrationpassword_type == USER_REGISTRATIONPASSWORD_VERIFICATION_PASS) {
    $config->set('registration', $user_registrationpassword_type)->save();
    $user_config->set('verify_mail', FALSE)->save();
    // Prevent standard notification email to administrators and to user.
    $user_config->set('notify.register_pending_approval', FALSE);
    $user_config->set('notify.register_no_approval_required', FALSE);
  }
  else {
    // Enable or disable core verification.
    if ($user_registrationpassword_type == USER_REGISTRATIONPASSWORD_NO_VERIFICATION) {
      $user_config->set('verify_mail', FALSE);
    }
    else {
      $user_config->set('verify_mail', TRUE);
    }

    // Let default value.
    // @see _user_mail_notify()
    $user_config->set('notify.register_pending_approval', FALSE);
    $user_config->set('notify.register_no_approval_required', FALSE);
  }

  // Save mail data.
  $config->set('register_subject', $form_state->getValue('user_registrationpassword_register_subject'));
  $config->set('register_body', $form_state->getValue('user_registrationpassword_register_body'));

  // Save or revert expiration limits variables.
  $config->set('registration_ftll_expire', (bool) $form_state->getValue('user_registrationpassword_registration_ftll_expire'))->save();
  $config->set('registration_ftll_timeout', $form_state->getValue('user_registrationpassword_registration_ftll_timeout'))->save();

  // Save config.
  $config->save();
  $user_config->save();
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * @see user_register_form()
 * @see user_registrationpassword_form_user_register_submit()
 */
function user_registrationpassword_form_user_register_form_alter(&$form, FormStateInterface $form_state) {
  // Prevent this from being run if approval with password on registration
  // form is set and the user is an anonymous user registering to the site.
  // When admin users create a user, this does not need to be executed.
  // And when this also does not need to be executed 'user_register' is not set
  // as 'Visitors can create accounts and no administrator approval is
  // required.' User registers, receives user_registrationpass email, would
  // not make sense. Cause that will unblock the user Without
  // the admin 'approving'.
  $current_user = \Drupal::currentUser();
  if (\Drupal::config('user.settings')->get('register') == USER_REGISTER_VISITORS
      && \Drupal::config('user_registrationpassword.settings')->get('registration') == USER_REGISTRATIONPASSWORD_VERIFICATION_PASS
      && !$current_user->id()) {
    // Set the user account to blocked.
    $form['account']['status']['#default_value'] = FALSE;
    // Supress any notification.
    $form['account']['notify']['#default_value'] = FALSE;
    // Register our validate and submit handlers.
    $form['actions']['submit']['#submit'][] = 'user_registrationpassword_form_user_register_submit';
  }
}

/**
 * Implements submission handler for the user registration form.
 *
 * @see user_register_form()
 * @see user_registrationpassword_form_user_register_form_alter()
 */
function user_registrationpassword_form_user_register_submit(&$form, FormStateInterface $form_state) {
  // Define the message we need to remove.
  // Yes, this throws a code style error, but this is in core.
  // See user.module, that string contains a <br />.
  $message = t('Thank you for applying for an account. Your account is currently pending approval by the site administrator.<br />In the meantime, a welcome message with further instructions has been sent to your email address.');

  // Unset all messages that contain the $message.
  foreach ($_SESSION['messages']['status'] as $status => $statusmessage) {
    // Test for core message (we need to replace).
    if ((string) $message == (string) $statusmessage) {
      // And unset it if we find it.
      unset($_SESSION['messages']['status'][$status]);
    }
  }
  $_SESSION['messages']['status'] = array_values($_SESSION['messages']['status']);

  // Notify the user.
  /** @var \Drupal\user\UserInterface $account */
  $storage = $form_state->getStorage();
  $account = $storage['user'];
  $params['account'] = $account;
  \Drupal::service('plugin.manager.mail')->mail('user_registrationpassword', 'register', $account->getEmail(), $account->getPreferredLangcode(), $params);

  // Set success message and redirect to the front page.
  drupal_set_message(t('A welcome message with further instructions has been sent to your e-mail address.'));
}

/**
 * Implements hook_mail().
 *
 * @see drupal_mail()
 * @see _user_registrationpassword_mail_text()
 * @see user_registrationpassword_mailkeys()
 * @see user_registrationpassword_mail_edit_text()
 * @see user_registrationpassword_mail_edit_token_types()
 */
function user_registrationpassword_mail($key, &$message, $params) {
  $language = isset($message['language']) ? $message['language'] : NULL;
  $variables = array('user' => $params['account']);
  $message['subject'] .= _user_registrationpassword_mail_text($key . '_subject', $language, $variables);
  $message['body'][] = _user_registrationpassword_mail_text($key . '_body', $language, $variables);
}

/**
 * Returns a mail string for a variable name.
 *
 * @see user_registrationpassword_mail()
 * @see user_registrationpassword_mail_tokens()
 * @see user_registrationpassword_mailkeys()
 * @see user_registrationpassword_mail_edit_text()
 * @see user_registrationpassword_mail_edit_token_types()
 */
function _user_registrationpassword_mail_text($key, $language = NULL, $variables = array(), $replace = TRUE) {

  $text = \Drupal::config('user_registrationpassword.settings')->get($key);

  if ($replace) {
    // We do not sanitize the token replacement, since the output of this
    // replacement is intended for an e-mail message, not a web browser.
    return \Drupal::token()->replace($text, $variables,
      array(
        'language' => $language,
        'callback' => 'user_registrationpassword_mail_tokens',
        'sanitize' => FALSE)
      );
  }

  return $text;
}

/**
 * Token callback to add unsafe tokens for user mails.
 *
 * @see user_mail_tokens()
 * @see user_registrationpassword_mail()
 * @see user_registrationpassword_confirmation_url()
 */
function user_registrationpassword_mail_tokens(&$replacements, $data, $options) {
  user_mail_tokens($replacements, $data, $options);
  if (isset($data['user'])) {
    $replacements['[user:registrationpassword-url]'] = user_registrationpassword_confirmation_url($data['user']);
  }
  // For D7 we use the rpt module to enable emails to contain
  // the user's password, so no need to add the password
  // token here, people just need to install rpt.
}

/**
 * Generates a unique URL for a user to login with their password already set.
 *
 * @param \Drupal\user\UserInterface $account
 *   The user account.
 *
 * @return string
 *   A unique URL that provides a one-time log in for the user, from which
 *   they can change their password.
 *
 * @see user_registrationpassword_mail_tokens()
 * @see user_pass_rehash()
 */
function user_registrationpassword_confirmation_url(UserInterface $account) {
  $timestamp = REQUEST_TIME;
  return Url::fromRoute('user_registrationpassword.confirm', ['uid' => $account->id(), 'timestamp' => $timestamp, 'hash' => user_pass_rehash($account, $timestamp)], ['absolute' => TRUE])->toString();
}

/**
 * Implements hook_mailkeys().
 *
 * @return array
 *   A simple string to identify the mailkey.
 *
 * @see user_registrationpassword_mail()
 * @see _user_registrationpassword_mail_text()
 * @see user_registrationpassword_mail_tokens()
 * @see user_registrationpassword_mail_edit_text()
 * @see user_registrationpassword_mail_edit_token_types()
 */
function user_registrationpassword_mailkeys() {
  return array(
    'register' => t('Welcome message when user self-registers and sets password during registration'),
  );
}

/**
 * Implements hook_mail_edit_text().
 *
 * @param string $mailkey
 *   The mailkey string.
 *
 * @param object $language
 *   The language.
 *
 * @return array
 *   Subject and body, ready for processing.
 *
 * @see user_registrationpassword_mail()
 * @see _user_registrationpassword_mail_text()
 * @see user_registrationpassword_mail_tokens()
 * @see user_registrationpassword_mailkeys()
 * @see user_registrationpassword_mail_edit_text()
 * @see user_registrationpassword_mail_edit_token_types()
 */
function user_registrationpassword_mail_edit_text($mailkey, $language) {
  $return = array();
  $return['subject'] = _user_registrationpassword_mail_text($mailkey . '_subject', $language, array(), FALSE);
  $return['body'] = _user_registrationpassword_mail_text($mailkey . '_body', $language, array(), FALSE);
  return $return;
}

/**
 * Implements hook_mail_edit_token_types().
 *
 * @param string $mailkey
 *   The mailkey.
 *
 * @return array
 *   A simple array for constructing the mail / tokens.
 *
 * @see user_registrationpassword_mail()
 * @see _user_registrationpassword_mail_text()
 * @see user_registrationpassword_mail_tokens()
 * @see user_registrationpassword_mailkeys()
 * @see user_registrationpassword_mail_edit_text()
 */
function user_registrationpassword_mail_edit_token_types($mailkey) {
  return array('user');
}

/**
 * Simple message and redirect.
 *
 * @param $type
 *   The type of message
 * @param $redirect
 *   The redirect route.
 *
 * @return $route_name
 *   The redirect route name.
 */
function user_registrationpassword_set_message($type = 'welcome', $redirect = '') {
  $route_name = '';

  // Select what message to display.
  switch ($type) {
    case 'linkerror':
      drupal_set_message(t('You have tried to use a one-time login link that has either been used or is no longer valid. Please request a new one using the form below.'));

      // Redirect to user/pass.
      if (!empty($redirect)) {
        $route_name = 'user.pass';
      }
      break;

    case 'welcome':
      drupal_set_message(t('Further instructions have been sent to your e-mail address.'));
      // Redirect to front.
      if (!empty($redirect)) {
        $route_name = '<front>';
      }
      break;

  }

  return $route_name;
}

/**
* Implements hook_form_FORM_ID_alter().
*/
function user_registrationpassword_form_user_pass_alter(&$form, FormStateInterface $form_state) {
  $form['#validate'][0] = '_user_registrationpassword_user_pass_validate';
  $form['#submit'][0] = '_user_registrationpassword_user_pass_submit';
}

/**
* Form validation function.
*/
function _user_registrationpassword_user_pass_validate(&$form, FormStateInterface $form_state) {
  // We try and load a blocked user that never ever logged in.
  // This should only return 'brand new' user accounts.
  $name = trim($form_state->getValue('name'));
  // Try to load by email.
  $users = \Drupal::entityQuery('user')
    ->condition('mail', $name)
    ->condition('status', 0)
    ->condition('access', 0)
    ->condition('login', 0)
    ->execute();

  if (empty($users)) {
    // No success, try to load by name.
    $users = \Drupal::entityQuery('user')
      ->condition('name', $name)
      ->condition('status', 0)
      ->condition('access', 0)
      ->condition('login', 0)
      ->execute();
  }

  if (!empty($users)) {
    $uid = reset($users);
    $account = \Drupal::entityTypeManager()->getStorage('user')->load($uid);
  }

  // If the account has never ever been used, load
  // the $account into the form for processing.
  if (!empty($account) && $account->id()) {
    $form_state->setValueForElement(array('#parents' => array('account')), $account);
  }
  // Otherwise, run validate of core.
  else {
    $core_validate = new UserPasswordForm(\Drupal::entityTypeManager()->getStorage('user'), \Drupal::languageManager());
    $core_validate->validateForm($form, $form_state);
  }
}

/**
* Implements submit function.
*/
function _user_registrationpassword_user_pass_submit(&$form, FormStateInterface $form_state) {
  /** @var \Drupal\user\UserInterface $account */
  $account = $form_state->getValue('account');

  // Then, if we have a user account
  // and it has never ever been used.
  if (!empty($account->id()) && !$account->getLastLoginTime() && !$account->getLastAccessedTime() && !$account->isActive()) {
    // Try to load the account in disabled state.
    $users = \Drupal::entityQuery('user')
      ->condition('uid', $account->id())
      ->condition('login', 0)
      ->condition('access', 0)
      ->condition('status', 0)
      ->execute();
    /** @var \Drupal\user\UserInterface $user */
    $uid = reset($users);

    // If the user never ever logged in, resend the activation mail.
    if (!empty($uid)) {
      $account = \Drupal::entityTypeManager()->getStorage('user')->load($uid);
      // Mail one time login URL and instructions using current language.
      $params['account'] = $account;

      // And on success, throw a message.
      if (\Drupal::service('plugin.manager.mail')->mail('user_registrationpassword', 'register', $account->getEmail(), $account->getPreferredLangcode(), $params)) {
        \Drupal::logger('user')->notice('Password reset instructions mailed to %name at %email.', ['%name' => $account->getAccountName(), '%email' => $account->getEmail()]);
        user_registrationpassword_set_message();
      }
    }
  }
  else {
    // If we found no errors execute core submission handler.
    // Obviously cache is disabled on this pages, so this should work.
    if (empty($_SESSION['messages']['error'])) {
      $core_submit = new UserPasswordForm(\Drupal::entityTypeManager()->getStorage('user'), \Drupal::languageManager());
      $core_submit->submitForm($form, $form_state);
    }
  }
}
